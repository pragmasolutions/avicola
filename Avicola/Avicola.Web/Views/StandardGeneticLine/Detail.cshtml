@using Avicola.Office.Entities
@using Framework.Common.Web.Helpers
@model Avicola.Web.Models.GeneticLines.CreateStandardGeneticLineForm
@{
    var title = String.Format("Valores de {0} para {1}",
        Model.StandardGeneticLine.Standard.Name.ToUpper(),
        Model.StandardGeneticLine.GeneticLine.Name.ToUpper());
    ViewBag.Title = title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>@title</h3><br/>

<div class="form-group">
    <div class="col-md-10" style="padding-left: 0; margin-bottom: 10px;">
        @using (Html.BeginForm("Delete", "StandardGeneticLine", new { id = Model.StandardGeneticLine.Id }, FormMethod.Post, new { id = "delete-form" }))
        {
            @Html.AntiForgeryToken()
            
            @Html.ActionLink("Editar", "Edit", "StandardGeneticLine", routeValues: new { Model.StandardGeneticLine.Id }, htmlAttributes: new { @class = "btn btn-primary" })
            <button type="submit" class="btn btn-warning">Eliminar</button>
            @Html.BackButton("/StandardGeneticLine/Index/" + Model.StandardGeneticLine.GeneticLine.Id, "Volver a listado de estándares")
        }
    </div>
</div>

<table style="width: 100%;">
    <tr>
        <td style="width: 350px; vertical-align: top;">
            <div class="standard-item-container">
                <table>
                    <thead>
                    <th style="text-align: center;"><h4>Semana</h4></th>
                    <th style="width: 30px;"></th>
                    @if (Model.StandardGeneticLine.Standard.StandardTypeId == StandardType.UNIQUE_VALUE)
                    {
                        <th style="text-align: center;"><h4>Valor</h4></th>
                    }
                    else
                    {
                        <th style="text-align: center; width: 90px;"><h4>Mínimo</h4></th>
                        <th style="text-align: center; width: 90px;"><h4>Máximo</h4></th>
                    }
                    </thead>
                    <tbody>
                        @if (Model.StandardGeneticLine.Standard.AllowDecimal)
                        {
                            @Html.DisplayFor(model => model.StandardItems)
                        }
                        else
                        {
                            @Html.DisplayFor(model => model.IntegerStandardItems)
                        }
                        
                    </tbody>
                </table>
            </div>
        </td>
        <td style="vertical-align: top;">
            <div id="chart-container"></div>
        </td>
    </tr>
</table>


<style>
    .standard-item-container {
        padding: 15px 35px;
        border: 1px solid black;
        /*width: 300px;*/
    }

     .standard-item-container ul, .standard-item-container li{
         display: none;
     }

     #chart-container {
         height: 550px;
         border: 1px solid black;
         padding: 10px;
     }
</style>

@section scripts
{
    <script src="http://code.highcharts.com/highcharts.js"></script>
    <script src="http://code.highcharts.com/modules/exporting.js"></script>
    <script>
        var _showSecondValue = '@(Model.StandardGeneticLine.Standard.StandardTypeId == StandardType.VALUES_RANGE)' == 'True';
        var _standardName = '@Model.StandardGeneticLine.Standard.Name';

        function generateChart() {
            var categories = [];
            var series;

            if (_showSecondValue) {
                var firstSerie = {
                    name: 'Mínimo',
                    data: []
                }
                
                $('.item-value.first-value').each(function (i, item) {
                    var sequence = parseFloat($(item).prevAll('.item-sequence').html());
                    categories.push(sequence);
                    firstSerie.data.push(parseFloat($(item).html()));
                });
                var secondSerie = {
                    name: 'Máximo',
                    data: []
                }
                $('.item-value.second-value').each(function (i, item) {
                    secondSerie.data.push(parseFloat($(item).html()));
                });
                series = [firstSerie, secondSerie];
            } else {
                firstSerie = {
                    name: _standardName,
                    data: []
                }
                $('.item-value.first-value').each(function (i, item) {
                    var sequence = parseFloat($(item).prevAll('.item-sequence').html());
                    categories.push(sequence);
                    firstSerie.data.push(parseFloat($(item).html()));
                });
                series = [firstSerie];
            }
            
            $('#chart-container').highcharts({
                title: {
                    text: '@Model.StandardGeneticLine.GeneticLine.Name',
                    x: -20 //center
                },
                subtitle: {
                    text: 'Standard: @Model.StandardGeneticLine.Standard.Name',
                    x: -20
                },
                xAxis: {
                    categories: categories
                },
                yAxis: {
                    title: {
                        text: '@Model.StandardGeneticLine.Standard.Name (@Model.StandardGeneticLine.Standard.MeasureUnity)'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    valueSuffix: ' @Model.StandardGeneticLine.Standard.MeasureUnity'
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle',
                    borderWidth: 0
                },
                series: series
            });
        }

        $(function () {
            generateChart();

            $("#delete-form").on("submit", function () {
                return confirm("Está seguro que desea eliminar este estandar?  Esta operación no se puede deshacer.");
            });
        });
    </script>
}
